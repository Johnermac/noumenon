<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Site Scanner</title>
  
  <style>
    body {
      background-color: #121212;
      color: #fff;
      font-family: Arial, sans-serif;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      flex-direction: column;
      padding: 20px;
    }

    h1 {
      margin-bottom: 20px;
      font-size: 2rem;
      color: #ffffff;
      text-align: center;
    }

    .container {
      background-color: #1e1e1e;
      border: 1px solid #333;
      border-radius: 15px;
      padding: 30px 25px;
      width: 90%;
      max-width: 800px;
      min-width: 280px;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
    }

    .form-container {
      display: flex;
      flex-direction: column;
      gap: 15px;
      width: 100%;
    }

    .input-container {
      position: relative;
      width: 94%;
    }

    input[type="text"] {
      width: 94%;
      padding: 12px 45px 12px 15px;
      border: 1px solid #555;
      border-radius: 25px;
      outline: none;
      font-size: 16px;
      background-color: #fff;
      color: #000;
    }

    button {
      position: absolute;
      right: 10px;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      cursor: pointer;
      padding: 5px;
    }

    button img {
      width: 20px;
      height: 20px;
      filter: invert(0); /* Black icon on white input */
    }

    .results {
      margin-top: 20px;
      text-align: left;
      font-size: 15px;
      word-wrap: break-word;
    }

    .found_directories {
      color: lightgreen;
    }

    .not-found_dir {
      color: red;
    }

    .active_sub {
      color: lightgreen;
    }

    .found_subdomains {
      color: yellow;
    }

    /* Toggle Switch */
    .toggle-switch {
      position: relative;
      display: inline-block;
      width: 50px;
      height: 28px;
      margin-right: 10px;
      vertical-align: middle;
      flex-shrink: 0;
    }

    .toggle-switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #444;
      transition: .3s;
      border-radius: 28px;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 20px;
      width: 20px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      transition: .3s;
      border-radius: 50%;
    }

    input:checked + .slider {
      background-color: #2196F3;
    }

    input:checked + .slider:before {
      transform: translateX(22px);
    }

    .toggle-row {
      display: flex;
      align-items: center;
      margin: 10px 0;
      color: #ccc;
      font-size: 14px;
    }

        .result-section {
      max-height: 200px;
      overflow-y: auto;
      padding: 10px;
      border: 1px solid #333;
      border-radius: 10px;
      margin-bottom: 15px;
      background-color: #2a2a2a;
    }

    .result-section ul {
      margin: 0;
      padding-left: 18px;
    }

    .result-section p {
      margin: 0 0 5px 0;
      font-weight: bold;
    }

</style>



</head>
<body>

  <h1>Site Scanner</h1>

  <div class="container">
    <form id="scan-form">
      <div class="input-container">
        <input type="text" id="site-input" name="site" placeholder="Enter site URL..." required>
        <button type="submit">
          <img src="https://cdn-icons-png.flaticon.com/512/622/622669.png" alt="Search">
        </button>
      </div>

      <div class="toggle-row">
        <label class="toggle-switch">
          <input type="checkbox" id="scan-directories-toggle" name="scan_directories">
          <span class="slider"></span>
        </label>
        <span>Scan Directories</span>
      </div>

      <div class="toggle-row">
        <label class="toggle-switch">
          <input type="checkbox" id="scan-subdomains-toggle" name="scan_subdomains">
          <span class="slider"></span>
        </label>
        <span>Scan Subdomains</span>
      </div>

      <div class="toggle-row">
        <label class="toggle-switch">
          <input type="checkbox" id="scan-links-toggle" name="scan_links">
          <span class="slider"></span>
        </label>
        <span>Scan Links</span>
      </div>

    </form>
    <div id="result" class="results"></div> <!-- Here the results will be displayed -->
    
  </div>

  <script>
    document.getElementById("scan-form").addEventListener("submit", async function(event) {
        event.preventDefault();

        const siteInput = document.getElementById("site-input");
        const scanDirectoriesToggle = document.getElementById("scan-directories-toggle");
        const scanSubdomainsToggle = document.getElementById("scan-subdomains-toggle");
        const scanLinksToggle = document.getElementById("scan-links-toggle");

        const resultElement = document.getElementById("result");
        resultElement.innerHTML = "‚åõ Scanning...";

        const site = siteInput.value.trim();
        const scanDirectories = scanDirectoriesToggle.checked;
        const scanSubdomains = scanSubdomainsToggle.checked;
        const scanLinks = scanLinksToggle.checked;

        if (!site) {
            resultElement.innerHTML = "‚ùå Please enter a site URL.";
            return;
        }

        try {
            const response = await fetch("/scans/create", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ site: site, scan_directories: scanDirectories, scan_subdomains: scanSubdomains, scan_links: scanLinks }) 
            });

            const data = await response.json();

            if (response.ok) {
                resultElement.innerHTML = `<p>üì° Scan started for: <strong>${site}</strong></p>`;
                
                // Initialize flags to check if scans are complete
                let directoriesComplete = !scanDirectories; // If scanDirectories is false, consider it complete
                let subdomainsComplete = !scanSubdomains;   // If scanSubdomains is false, consider it complete
                
                let resultData = {};

                // Function to update results
                const updateResults = () => {
                  let resultHTML = `<p>üì° Scan Results for: <strong>${site}</strong></p>`;

                  // Found Directories
                  if (resultData.found_directories && resultData.found_directories.length > 0) {
                    resultHTML += `<div class="result-section">
                                      <p class="found_directories">‚úÖ Found Directories:</p><ul>`;
                    resultData.found_directories.forEach(directory => {
                      resultHTML += `<li><a href="${site}/${directory}" target="_blank">${directory}</a></li>`;
                    });
                    resultHTML += `</ul></div>`;
                  }

                  // Not Found Directories
                  if (resultData.not_found_directories && resultData.not_found_directories.length > 0) {
                    resultHTML += `<div class="result-section">
                                      <p class="not-found_dir">‚ùå Not Found Directories:</p><ul>`;
                    resultData.not_found_directories.forEach(directory => {
                      resultHTML += `<li><span>${directory}</span></li>`;
                    });
                    resultHTML += `</ul></div>`;
                  }

                  // Found Subdomains
                  if (resultData.found_subdomains && resultData.found_subdomains.length > 0) {
                    resultHTML += `<div class="result-section">
                                      <p class="found_subdomains">üü° Found Subdomains:</p><ul>`;
                    resultData.found_subdomains.forEach(subdomain => {
                      resultHTML += `<li><a href="https://${subdomain}" target="_blank">${subdomain}</a></li>`;
                    });
                    resultHTML += `</ul></div>`;
                  }

                  // Active Subdomains
                  if (resultData.active_subdomains && resultData.active_subdomains.length > 0) {
                    resultHTML += `<div class="result-section">
                                      <p class="active_sub">üü¢ Active Subdomains:</p><ul>`;
                    resultData.active_subdomains.forEach(subdomain => {
                      resultHTML += `<li><a href="https://${subdomain}" target="_blank">${subdomain}</a></li>`;
                    });
                    resultHTML += `</ul></div>`;
                  }

                  // Extracted Links
                  if (resultData.extracted_links && resultData.extracted_links.length > 0) {
                    resultHTML += `<div class="result-section">
                                      <p class="extracted_links">üîó Extracted Links:</p><ul>`;
                    resultData.extracted_links.forEach(link => {
                      resultHTML += `<li><a href="${link}" target="_blank">${link}</a></li>`;
                    });
                    resultHTML += `</ul></div>`;
                  }

                  resultElement.innerHTML = resultHTML;
                };


                // Periodically check for scan results
                const checkResults = setInterval(async () => {
                  try {
                    const resultResponse = await fetch(`/scans/show?site=${encodeURIComponent(site)}`);

                    if (resultResponse.ok) {
                      const currentResultData = await resultResponse.json();

                      // Merge the current results into the overall results data
                      resultData = { ...resultData, ...currentResultData };

                      // Dynamically update the results
                      updateResults();

                      // Update completion flags based on scan status
                      directoriesComplete = directoriesComplete || currentResultData.directories_scan_complete;
                      subdomainsComplete = subdomainsComplete || currentResultData.subdomain_scan_complete;

                      // Stop polling if both directories and subdomains scans are complete
                      if (directoriesComplete && subdomainsComplete) {
                        clearInterval(checkResults); // Stop polling once the main scans are complete
                        resultElement.innerHTML += `<p>‚úÖ Scans are complete for: <strong>${site}</strong></p>`;
                      }
                    } else {
                      console.error("Failed to fetch scan results.");
                    }
                  } catch (error) {
                    console.error("Error fetching results:", error);
                  }
                }, 5000); // Check every 5 seconds

            } else {
                resultElement.innerHTML = `‚ùå Error: ${data.error}`;
            }
        } catch (error) {
            resultElement.innerHTML = "‚ùå Failed to start scan.";
        }
    });    

</script>


</body>
</html>
